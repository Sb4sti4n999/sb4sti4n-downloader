#!/bin/bash

# Auto-instalador global
if [ ! -f "/usr/local/bin/sb4sti4n" ]; then
    echo -e "\033[1;33m🚀 Instalando sb4sti4n...\033[0m"
    sudo curl -L https://raw.githubusercontent.com/tu-usuario/sb4sti4n/main/sb4sti4n -o /usr/local/bin/sb4sti4n
    sudo chmod +x /usr/local/bin/sb4sti4n
    echo -e "\033[1;32m✅ Instalación completada! Usa 'sb4sti4n <URL>' para comenzar\033[0m"
    exit 0
fi

# ==================== CONFIGURACIÓN PRINCIPAL ====================
CREATOR="sb4sti4n"
VERSION="8.0"
FOLDER_NAME="sb4sti4n√Downloads"

# Paleta de colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
BLUE='\033[0;34m'
WHITE='\033[1;37m'
NC='\033[0m'

# Animaciones
SPINNER=("⣾" "⣽" "⣻" "⢿" "⡿" "⣟" "⣯" "⣷")
DOTS=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")

# Configuración técnica
USER_AGENT="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
MAX_CONNECTIONS=16

# ==================== FUNCIONES PRINCIPALES ====================
setup_environment() {
    if [[ -d "/system" && -d "/sdcard" ]]; then
        DEFAULT_DIR="/sdcard/0/${FOLDER_NAME}"
        ANDROID=true
    else
        DEFAULT_DIR="${HOME}/${FOLDER_NAME}"
        ANDROID=false
    fi

    VIDEO_DIR="${DEFAULT_DIR}/Videos"
    FILE_DIR="${DEFAULT_DIR}/Files"
    LOG_DIR="${DEFAULT_DIR}/Logs"
    
    mkdir -p "$VIDEO_DIR" "$FILE_DIR" "$LOG_DIR"
    exec > >(tee -a "${LOG_DIR}/sb4sti4n.log") 2>&1
}

show_banner() {
    clear
    echo -e "${PURPLE}"
    echo -e " ██████╗ ██████╗ ██████╗ ███████╗████████╗██╗ █████╗ ███╗  ██╗"
    echo -e "██╔════╝██╔═══██╗██╔══██╗██╔════╝╚══██╔══╝██║██╔══██╗████╗ ██║"
    echo -e "██║     ██║   ██║██████╔╝█████╗     ██║   ██║███████║██╔██╗██║"
    echo -e "██║     ██║   ██║██╔══██╗██╔══╝     ██║   ██║██╔══██║██║╚████║"
    echo -e "╚██████╗╚██████╔╝██║  ██║███████╗   ██║   ██║██║  ██║██║ ╚███║"
    echo -e " ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝╚═╝  ╚═╝╚═╝  ╚══╝"
    echo -e "${BLUE}════════════════════════════════════════════════════════════${NC}"
    echo -e "${WHITE}           Download Manager v${VERSION} by ${CREATOR}${NC}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════${NC}\n"
}

check_dependencies() {
    declare -A tools=(
        ["curl"]="sudo apt install curl -y"
        ["wget"]="sudo apt install wget -y"
        ["ffmpeg"]="sudo apt install ffmpeg -y"
        ["aria2c"]="sudo apt install aria2 -y"
        ["yt-dlp"]="sudo curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp && sudo chmod a+rx /usr/local/bin/yt-dlp"
    )

    for tool in "${!tools[@]}"; do
        if ! command -v $tool &> /dev/null; then
            echo -e "${YELLOW}⚙️ Instalando $tool...${NC}"
            eval "${tools[$tool]}" > /dev/null 2>&1
            [ $? -ne 0 ] && echo -e "${RED}❌ Error instalando $tool${NC}" && exit 1
        fi
    done
}

get_origin_info() {
    local url="$1"
    ORIGIN_PAGE="$url"
    DOMAIN=$(echo "$url" | awk -F/ '{gsub(/(https?:\/\/|www\.)/,"",$3); print $3}')
    
    case "$DOMAIN" in
        "youtube.com"|"youtu.be") ORIGIN_NAME="YouTube"; ORIGIN_ICON="🎥" ;;
        "drive.google.com") ORIGIN_NAME="Google Drive"; ORIGIN_ICON="☁️" ;;
        "sourceforge.net") ORIGIN_NAME="SourceForge"; ORIGIN_ICON="🚀" ;;
        "github.com") ORIGIN_NAME="GitHub"; ORIGIN_ICON="🐱" ;;
        *) ORIGIN_NAME="$DOMAIN"; ORIGIN_ICON="🌐" ;;
    esac
}

download_sourceforge() {
    local url="$1"
    echo -e "${CYAN}🚀 Modo Turbo Activado para SourceForge${NC}"
    
    local project_path=$(echo "$url" | sed -n 's|https://sourceforge.net/projects/\([^/]*\)/files/\(.*\)/download|\1/\2|p')
    local direct_url="https://downloads.sourceforge.net/project/${project_path}"
    local file_name=$(basename "$direct_url")
    
    aria2c --file-allocation=none \
           --split=$MAX_CONNECTIONS \
           --max-connection-per-server=$MAX_CONNECTIONS \
           --dir="$FILE_DIR" \
           --out="$file_name" \
           --summary-interval=0 \
           --check-certificate=false \
           "$direct_url" && return 0
    
    wget --progress=bar:force \
         --no-check-certificate \
         -O "$FILE_DIR/$file_name" \
         "$direct_url" || return 1
}

download_gdrive() {
    local url="$1"
    local file_id=$(echo "$url" | sed -n 's/.*\/d\/\([^\/]*\).*/\1/p')
    local download_url="https://drive.google.com/uc?id=${file_id}&export=download"
    local file_name=$(curl -s -L "$url" | grep -o '<title>.*</title>' | sed 's/<title>//;s/<\/title>//;s/ - Google Drive$//')
    
    aria2c --split=4 \
           --check-certificate=false \
           --dir="$FILE_DIR" \
           --out="$file_name" \
           "$download_url" || return 1
}

download_video() {
    local url="$1"
    yt-dlp -o "${VIDEO_DIR}/%(title)s.%(ext)s" \
           --merge-output-format mp4 \
           --no-playlist \
           "$url" || return 1
}

download_generic() {
    local url="$1"
    local file_name=$(basename "$url" | sed 's/?.*//')
    
    aria2c --split=4 \
           --dir="$FILE_DIR" \
           --out="$file_name" \
           "$url" || return 1
}

check_internet() {
    (ping -c 1 -W 2 8.8.8.8 >/dev/null) || {
        echo -e "${RED}❌ Error: Sin conexión a internet${NC}"
        exit 1
    }
}

show_help() {
    echo -e "${CYAN}Uso: sb4sti4n [OPCIÓN]... [URL]"
    echo -e "Descarga cualquier archivo o video de internet"
    echo -e "\nOpciones:"
    echo -e "  -h, --help    Muestra este mensaje"
    echo -e "  -v, --version Muestra la versión"
    echo -e "\nEjemplos:"
    echo -e "  sb4sti4n https://youtu.be/ID"
    echo -e "  sb4sti4n https://drive.google.com/archivo"
    echo -e "  sb4sti4n https://sourceforge.net/proyecto${NC}"
}

# ==================== EJECUCIÓN PRINCIPAL ====================
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

if [[ "$1" == "-v" || "$1" == "--version" ]]; then
    echo -e "${WHITE}sb4sti4n v${VERSION} by ${CREATOR}${NC}"
    exit 0
fi

[ -z "$1" ] && echo -e "${RED}❌ Error: Proporciona un URL${NC}" && show_help && exit 1

setup_environment
check_internet
check_dependencies
show_banner
get_origin_info "$1"

echo -e "\n${BLUE}════════════════════════════════════════════════${NC}"
echo -e "${WHITE}🔍 Detección de origen:"
echo -e "${CYAN} Plataforma: ${GREEN}${ORIGIN_ICON} ${ORIGIN_NAME}"
echo -e "${CYAN} URL Original: ${YELLOW}${ORIGIN_PAGE}${NC}"
echo -e "${BLUE}════════════════════════════════════════════════${NC}"

case "$DOMAIN" in
    *"youtube.com"*|*"youtu.be"*) download_video "$1" ;;
    *"drive.google.com"*) download_gdrive "$1" ;;
    *"sourceforge.net"*) download_sourceforge "$1" ;;
    *) download_generic "$1" ;;
esac

echo -e "\n${BLUE}════════════════════════════════════════════════${NC}"
echo -e "${GREEN}✅ Descarga completada exitosamente! ${WHITE}🎉${NC}"
echo -e "${BLUE}➤ Directorio: ${WHITE}${DEFAULT_DIR}${NC}"
echo -e "${BLUE}════════════════════════════════════════════════${NC}\n"